        -:    0:Source:/cygdrive/c/Users/vAsmad/CLionProjects/Algoritmos-y-Estructura-de-Datos-1/Trabajo Implementacion/auxiliares.cpp
        -:    0:Graph:/cygdrive/c/Users/vAsmad/CLionProjects/Algoritmos-y-Estructura-de-Datos-1/Trabajo Implementacion/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcno
        -:    0:Data:/cygdrive/c/Users/vAsmad/CLionProjects/Algoritmos-y-Estructura-de-Datos-1/Trabajo Implementacion/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    1:#include "definiciones.h"
        -:    2:#include "auxiliares.h"
        -:    3:
        -:    4:using namespace std;
        -:    5:// aqui se pueden ubicar todas las funciones auxiliares de soporte para la resolucion de los ejercicios
    #####:    6:pair<int,int> mp(int a, int b) {
    #####:    7:    return make_pair(a, b);
    %%%%%:    7-block  0
        -:    8:}
        -:    9:
     1376:   10:int mod (int a, int b)
        -:   11:{
     1376:   12:    if(b < 0) //you can check for b == 0 separately and do what you want
     1376:   12-block  0
    #####:   13:        return -mod(-a, -b);
    %%%%%:   13-block  0
     1376:   14:    int ret = a % b;
     1376:   15:    if(ret < 0)
     1376:   15-block  0
      132:   16:        ret+=b;
      132:   16-block  0
     1376:   17:    return ret;
     1376:   17-block  0
        -:   18:}
    #####:   19:int filas(rectangulo t){
    #####:   20:    return t.size();
    %%%%%:   20-block  0
        -:   21:}
    #####:   22:int columnas(rectangulo t) {
    #####:   23:    if (filas(t) > 0) {
    %%%%%:   23-block  0
    #####:   24:        return t[0].size();
    %%%%%:   24-block  0
        -:   25:    }
    #####:   26:    return 0;
    %%%%%:   26-block  0
        -:   27:}
    #####:   28:bool esRectangulo(rectangulo r){
    #####:   29:    bool iguales = true;
    #####:   30:    if(filas(r)>0 && columnas(r) > 0){
    %%%%%:   30-block  0
    %%%%%:   30-block  1
    %%%%%:   30-block  2
    %%%%%:   30-block  3
    %%%%%:   30-block  4
    %%%%%:   30-block  5
    %%%%%:   30-block  6
    %%%%%:   30-block  7
    %%%%%:   30-block  8
    %%%%%:   30-block  9
    %%%%%:   30-block 10
    %%%%%:   30-block 11
    $$$$$:   30-block 12
    $$$$$:   30-block 13
    $$$$$:   30-block 14
    $$$$$:   30-block 15
    $$$$$:   30-block 16
    #####:   31:        for(int i = 0; i<r.size(); i++){
    %%%%%:   31-block  0
    %%%%%:   31-block  1
    %%%%%:   31-block  2
    #####:   32:            if(r[i].size() != r[0].size()){
    %%%%%:   32-block  0
    #####:   33:                iguales=false;
    %%%%%:   33-block  0
        -:   34:            }
        -:   35:        }
        -:   36:    }
    #####:   37:    return iguales;
    %%%%%:   37-block  0
    %%%%%:   37-block  1
        -:   38:}
        -:   39:
    #####:   40:bool esToroide(toroide t){
    #####:   41:    if(filas(t) >= 3 && columnas(t) >= 3 && esRectangulo(t)){
    %%%%%:   41-block  0
    %%%%%:   41-block  1
    %%%%%:   41-block  2
    %%%%%:   41-block  3
    %%%%%:   41-block  4
    %%%%%:   41-block  5
    %%%%%:   41-block  6
    %%%%%:   41-block  7
    %%%%%:   41-block  8
    %%%%%:   41-block  9
    %%%%%:   41-block 10
    %%%%%:   41-block 11
    %%%%%:   41-block 12
    %%%%%:   41-block 13
    %%%%%:   41-block 14
    %%%%%:   41-block 15
    %%%%%:   41-block 16
    $$$$$:   41-block 17
    $$$$$:   41-block 18
    $$$$$:   41-block 19
    $$$$$:   41-block 20
    $$$$$:   41-block 21
    $$$$$:   41-block 22
    $$$$$:   41-block 23
    $$$$$:   41-block 24
    #####:   42:        return true;
    %%%%%:   42-block  0
        -:   43:    }
    #####:   44:    return false;
    %%%%%:   44-block  0
        -:   45:}
        -:   46:
    #####:   47:bool sinRepetidos(vector<posicion> s){
    #####:   48:    bool hayRepetidos = false;
    #####:   49:    for(int i = 0; i<s.size(); i++){
    %%%%%:   49-block  0
    %%%%%:   49-block  1
    %%%%%:   49-block  2
    #####:   50:        for(int j=0; j<s.size(); j++){
    %%%%%:   50-block  0
    %%%%%:   50-block  1
    %%%%%:   50-block  2
    #####:   51:            if(i!=j && (s[i] == s[j]))
    %%%%%:   51-block  0
    %%%%%:   51-block  1
    %%%%%:   51-block  2
    %%%%%:   51-block  3
    %%%%%:   51-block  4
    #####:   52:                hayRepetidos = true;
    %%%%%:   52-block  0
        -:   53:        }
        -:   54:    }
    #####:   55:    return hayRepetidos;
    %%%%%:   55-block  0
        -:   56:}
        -:   57:
    #####:   58:float cantidadVivas(toroide t){
    #####:   59:    float vivas = 0 ;
    #####:   60:    for(int i = 0; i<t.size(); i++){
    %%%%%:   60-block  0
    %%%%%:   60-block  1
    %%%%%:   60-block  2
    #####:   61:        for(int j = 0; j<t[0].size(); j++){
    %%%%%:   61-block  0
    %%%%%:   61-block  1
    %%%%%:   61-block  2
    #####:   62:            if(t[i][j]){
    %%%%%:   62-block  0
    #####:   63:                vivas++;
    %%%%%:   63-block  0
        -:   64:            }
        -:   65:        }
        -:   66:    }
    #####:   67:    return vivas;
    %%%%%:   67-block  0
        -:   68:}
        -:   69:
    #####:   70:float superficieTotal(toroide t){
    #####:   71:    return filas(t)*columnas(t);
    %%%%%:   71-block  0
    %%%%%:   71-block  1
    %%%%%:   71-block  2
    %%%%%:   71-block  3
    $$$$$:   71-block  4
    $$$$$:   71-block  5
    $$$$$:   71-block  6
        -:   72:}
        -:   73:
       86:   74:int vecinosVivos(toroide t, int f, int c){
       86:   75:    int vivos = 0;
      344:   76:    for(int i = f-1; i<=f+1; i++){
       86:   76-block  0
      344:   76-block  1
      258:   76-block  2
     1032:   77:        for(int j = c-1; j<= c+1; j++){
      258:   77-block  0
     1032:   77-block  1
      774:   77-block  2
      774:   78:            if((i != f) || (j != c)){
      774:   78-block  0
      258:   78-block  1
      688:   79:                int i_i = mod(i, t.size());
      688:   79-block  0
      688:   80:                int j_j = mod(j, t[0].size());
      688:   81:                if(t[i_i][j_j]){
      240:   82:                    vivos++;
      240:   82-block  0
        -:   83:                }
        -:   84:            }
        -:   85:        }
        -:   86:    }
       86:   87:    return vivos;
       86:   87-block  0
        -:   88:}
        -:   89:
        -:   90:
        -:   91:
        -:   92:
        -:   93:/*
        -:   94:bool enRango(int i, vector<bool> s){
        -:   95:    return (0 <= i < s.size());
        -:   96:}
        -:   97:bool enRangoToroide(int f, int c, rectangulo t){
        -:   98:    vector<bool> m(t.size(), true);
        -:   99:    if(enRango(f,m)){
        -:  100:        if(enRango(c, t[0])){
        -:  101:            return true;
        -:  102:        }
        -:  103:    }
        -:  104:    return false;
        -:  105:}
        -:  106:*/
        -:  107:
        -:  108://No pueden usar esta función para resolver el TPI.
        -:  109://Tampoco pueden usar iteradores, como usa esta función.
    #####:  110:vector<posicion> ordenar(vector<posicion> &v) {
    #####:  111:    sort(v.begin(), v.end());
    %%%%%:  111-block  0
    #####:  112:    return v;
        -:  113:}
